<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">&lt;undefined&gt;</title>
  <id>https://lae.nz/</id>
  <updated>2024-01-30T00:00:00Z</updated>
  <author>
    <name>Lae Chen</name>
  </author>
  <link rel="alternate" href="https://lae.nz/" />
  <link rel="self" href="https://lae.nz/index.xml" />
  <entry>
    <id>https://lae.nz/posts/2024/01/30/finding-my-cheapest-power-plan.html</id>
    <title type="text">Finding My Cheapest Power Plan</title>
    <updated>2024-01-30T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2024/01/30/finding-my-cheapest-power-plan.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>Finding My Cheapest Power Plan</h1>
        <p>It's been a few years since I last switched power company, so I
thought it's time to check things out again to see if I can save some
electricity costs. But I didn't want to just go to each company's
websites and compare the rates, I want to calculate the rates against
my actual power usage to get the concrete costs for my specific usage
pattern.</p>
        <p>I'm currently with Electric Kiwi, and on my account page I can see a
breakdown of my usages:</p>
        <p>
          <img src="https://lae.nz/posts/2024/01/30/ek-insights.png" alt="Electric Kiwi Insights" />
        </p>
        <p>To get the raw data behind this is fairly straight forward, with the
help of the browser's dev tools, I can inspect the request being made,
then change a few parameters and retrieve all my usage data for the
whole of 2023. The JSON payload looks something like this:</p>
        <pre>
          <code class="language-json">{
  "data": {
    "usage": {
      "2023-12-31": {
        "intervals": {
          "1": {
            "consumption": "0.17",
            "time": "12:00 AM",
            ...
          },
          "2": {
            "consumption": "0.10",
            "time": "12:30 AM"
            ...
...
</code>
        </pre>
        <p>It's essentially a list of half hour buckets of the whole of 2023. We
can extract the bits we want with a little Python:</p>
        <pre>
          <code class="language-python">class HalfHourlyUsage(NamedTuple):
    start: datetime
    kwh: Decimal

with open("half_hourly.json") as input:
    data = json.load(input)

half_hourly_usages = [
    HalfHourlyUsage(
        datetime.strptime(f"{date} {interval['time']}", "%Y-%m-%d %I:%M %p"),
        Decimal(interval["consumption"]),
    )
    for date, usage in data["data"]["usage"].items()
    for interval in usage["intervals"].values()
]
</code>
        </pre>
        <p>Which essentially gives us the start time of the half hour, and the
amount of electricity used for that half hour in kWh:</p>
        <pre>
          <code>2023-12-10 23:00:00, 0.78
2023-12-10 23:30:00, 1.27
...
</code>
        </pre>
        <p>Now with the data in hand, we can go through the power companies and
calculate their advertised rates against this usage data. For example,
given a company's low user plan, which has a daily fixed cost of
$0.69, day rate of $0.3117/kWh, and night rate of $0.1507/kWh, we can
calculate the total cost like so:</p>
        <pre>
          <code class="language-python">def calculate_cost(
    usages: list[HalfHourlyUsage],
    day_rate: Decimal,
    kwh_rate: Callable[[datetime], Decimal],
) -&gt; Decimal:
    days_cost = day_rate * sum(
        366 if calendar.isleap(year) else 365
        for year in {usage.start.year for usage in usages}
    )
    kwhs_cost = sum([kwh_rate(usage.start) * usage.kwh for usage in usages])
    return days_cost + kwhs_cost

cost = calculate_cost(
    half_hourly_usages,
    day_rate=Decimal("0.69"),
    kwh_rate=lambda time: Decimal("0.3117")
    if 7 &lt;= time.hour &lt; 23
    else Decimal("0.1507"),
)
</code>
        </pre>
        <p>After going through some calculations, here are the list of plans I've
compared against my usage data for 2023, cost is the total cost for
year 2023, sorted by lowest first:</p>
        <table>
          <thead>
            <tr>
              <th>Plan</th>
              <th>Cost</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Electric Kiwi, PowerShifter</td>
              <td>$1,044.93</td>
            </tr>
            <tr>
              <td>Electric Kiwi, Prepay 300</td>
              <td>$1,065.79</td>
            </tr>
            <tr>
              <td>Electric Kiwi, MoveMaster</td>
              <td>$1,208.05</td>
            </tr>
            <tr>
              <td>Contact Energy, Good Nights</td>
              <td>$1,213.87</td>
            </tr>
            <tr>
              <td>Contact Energy, Good Weekends</td>
              <td>$1,263.42</td>
            </tr>
            <tr>
              <td>Flick, Flat</td>
              <td>$1,297.27</td>
            </tr>
            <tr>
              <td>Powershop</td>
              <td>$1,326.64</td>
            </tr>
            <tr>
              <td>Frank Energy</td>
              <td>$1,332.78</td>
            </tr>
            <tr>
              <td>Electric Kiwi, Stay Ahead 200</td>
              <td>$1,354.49</td>
            </tr>
            <tr>
              <td>Flick, Off Peak</td>
              <td>$1,368.08</td>
            </tr>
            <tr>
              <td>Genesis, Energy Basic</td>
              <td>$1,376.88</td>
            </tr>
            <tr>
              <td>Genesis, Energy Plus</td>
              <td>$1,392.48</td>
            </tr>
            <tr>
              <td>Meridian, Simple</td>
              <td>$1,449.76</td>
            </tr>
            <tr>
              <td>Contact Energy, Basic</td>
              <td>$1,461.11</td>
            </tr>
            <tr>
              <td>Electric Kiwi, Kiwi</td>
              <td>$1,471.59</td>
            </tr>
            <tr>
              <td>Contact Energy, Broadband Bundle</td>
              <td>$1,526.30</td>
            </tr>
          </tbody>
        </table>
        <p>My current plan is Electric Kiwi Stay Ahead 200, if I switch to
PowerShifter, it would be a saving of ~$300 per year, or ~23% cheaper.
But PowerShifter requires switching broadband to them, I don't want to
do that, so I'll probably go with Prepay 300 instead.</p>
        <p>
          <time itemprop="datePublished" datetime="2024-01-30">2024-01-30</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2023/11/23/this-site-now-has-uncool-urls.html</id>
    <title type="text">This Site Now Has Uncool URLs</title>
    <updated>2023-11-23T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2023/11/23/this-site-now-has-uncool-urls.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>This Site Now Has Uncool URLs</h1>
        <p>W3C says that <a href="https://www.w3.org/Provider/Style/URI">cool URIs don't
change</a>, and one of the
suggestions is to leave the file name extension out of the URL. So
"/about" instead of "/about.html".</p>
        <p>
          <a href="https://gohugo.io/">Hugo</a> also follows this advise and generates what
it calls "pretty" URLs by default. So if you have "content/about.md",
it will generate "/about/" as the URL path, though there is an option
called
"<a href="https://gohugo.io/content-management/urls/#appearance">uglyURLs</a>"
you can turn on to change it to generate "/about.html".</p>
        <p>Cloudflare Pages is taking an even more opinionated approach
(<a href="https://community.cloudflare.com/t/prevent-truncating-and-removal-of-page-name-extensions/388845">currently not
configurable</a>),
so if your site has "/about.html" and when a user visits that,
Cloudflare will remove the extension and does a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308">308 permanent
redirect</a>
to "/about".</p>
        <p>It's generally good advice, as hiding the file extension means hiding
away the implementation details, giving the server the flexibility to
change how the page is generated whenever it wants, it could be static
html files today, tomorrow it could be xhtml, or dynamically
generated.</p>
        <p>However, as one may notice based of the URLs on this site, I have done
quite the opposite, where every link has a file extension, because of
the personal desire of wanting to make this site as static as
possible, where everything is a file and is statically/relatively
linked together. The end result is that it is now truly server-less,
you can download the whole thing and open the local pages with a
browser, and it will look exactly the same, with all links working
correctly, without serving it through a server. This is actually how I
use it too when writing.</p>
        <p>
          <time itemprop="datePublished" datetime="2023-11-23">2023-11-23</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2023/10/19/ubuntu-8-04.html</id>
    <title type="text">Ubuntu 8.04</title>
    <updated>2023-10-19T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2023/10/19/ubuntu-8-04.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>Ubuntu 8.04</h1>
        <p>Back in the days when new versions of Ubuntu were being released, you
can actually request an installation CD to be sent to you, and
Canonical would do so free of charge. Recently while sorting some old
stuff out, I have found such a CD, it was for Ubuntu 8.04 (Hardy
Heron). So for fun I booted it up, and here are some obligated photos
and screenshots.</p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/ubuntu-disc.jpg" alt="Ubuntu Disc" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/ubuntu-cover.jpg" alt="Ubuntu Cover" />
        </p>
        <p>Only needs 384MB of RAM. ðŸ‘´</p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/desktop.jpg" alt="Desktop" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/welcome.jpg" alt="Welcome" />
        </p>
        <blockquote>
          <p>Ubuntu has a clear focus on the user and usability - it should Just
Work.</p>
        </blockquote>
        <p>That's arguably still true to this day, at least when compared to
vanilla Gnome.</p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/openoffice.jpg" alt="OpenOffice" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/gimp.jpg" alt="GIMP" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/19/firefox.jpg" alt="Firefox" />
        </p>
        <p>Pretty surprised to see Google automatically loads a version of itself
that works in such an old version of Firefox, while others like Bing
and DuckDuckGo would just straight up refused to load.</p>
        <p>
          <time itemprop="datePublished" datetime="2023-10-19">2023-10-19</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2023/10/12/my-first-open-source-project.html</id>
    <title type="text">My First Open Source Project</title>
    <updated>2023-10-12T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2023/10/12/my-first-open-source-project.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>My First Open Source Project</h1>
        <p>Back in early 2010, when I was fresh out of university, and was still
looking for my first programming job, I started working on my very
first open source project. It was inspired by the last year group
project at the university, I thought I had a few ideas that could take
it further, so I decided to start from scratch.</p>
        <p>It's more a decade ago at this point, so I have forgotten most of the
things about it, but I still remember spending most of my free time,
day and night, half lying on the couch (not recommended) with my <a href="https://en.wikipedia.org/wiki/Dell_Studio">Dell
Studio 15</a> laptop at the
time, designing features, class diagrams, writing code, unit tests, UI
tests, reading about good coding practices and applying them on the
project, purely for fun, I loved it, and I had learned so much in the
process.</p>
        <p>It was called Rabbit (I couldn't think of better names at the time), a
plugin for <a href="https://www.eclipse.org/ide/">the Eclipse IDE</a>, <a href="https://code.google.com/archive/p/rabbit-eclipse/">hosted on
Google Code</a> with
SVN, later moved to Git, it tracks statistics on what functionalities
you use and how you spent your time in the IDE. For example, how often
you use each command, how much time you spent editing each file, it
even tracks how much time you spent writing each Java function (I was
quite proud of that feature). The user interface was also pretty
awesome, it lets you specify a date range for the data to view, allows
you to aggregate the data in a few different ways, and draws a bar
graph on the side for visualization.</p>
        <p>Here are some historical screenshots (all stats shown are actual stats
of me spent working on the project):</p>
        <p>
          <img src="https://lae.nz/posts/2023/10/12/rabbit-sessions.png" alt="Rabbit Sessions" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/12/rabbit-java.png" alt="Rabbit Java" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/12/rabbit-commands.png" alt="Rabbit Commands" />
        </p>
        <p>
          <img src="https://lae.nz/posts/2023/10/12/rabbit-files.png" alt="Rabbit Files" />
        </p>
        <p>And according to the GitHub stats, I've added ~270K lines and removed
~225K lines of code cross a period of about a year and half between
2010 and 2011, and the project contains roughly ~45K lines of code.</p>
        <p>Being an open source project, it has received a few <a href="https://code.google.com/archive/p/rabbit-eclipse/issues">feature requests
and bug
reports</a>. And
I have had some interesting email exchanges with others as well:</p>
        <ul>
          <li>
            <p>AndrÃ© from the University of Zurich was expanding on the code as
part of his bachelor thesis.</p>
          </li>
          <li>
            <p>Russell from Auburn University wanted to use the plugin in one of
his spring classes, and he even extended it to support tracking time
spent on Python classes/functions.</p>
          </li>
          <li>
            <p>Someone tried to use the plugin as a way to "keep people on track",
as they believed their programmers weren't as honest as they would
like them to be...</p>
          </li>
        </ul>
        <p>Now skimming through the project code, it's actually somewhat clean,
well organized, and comes with a lot of unit/integration tests. But of
course, being a young programmer at the time, I have also made quite a
few beginner mistakes, like having useless comments that are pretty
much repeats of the function names, or the lack of proper error
handling, in some places I just catch the error, print it and continue
execution.</p>
        <p>Eventually, due to other interests and life commitments, I stopped
working on it, but the things I've learned from it has stayed me
throughout my career:</p>
        <ul>
          <li>
            <p>
              <strong>Don't be afraid of doing things you don't know how to do (yet)</strong>.
I had no idea on how to do any of things when I first started, but
it was the desire and willingness to learn that helped me figure
things out along the way, and that has also helped improve my
research and problem solving skills.</p>
          </li>
          <li>
            <p>
              <strong>Think before you code</strong>. I spent a lot of time thinking about how
to architect the features, I remembered I stopped coding for days
and spent the time thinking how to make the core of the code base
extensible, once I figured it out, I was able to add new features in
very short amount of time. So sometimes you need to slow down so you
can go faster later.</p>
          </li>
          <li>
            <p>
              <strong>Best way to learn is by doing</strong>. If you want to be good at
something you have to practice and practice. You can't learn to ride
a bike by just reading about it.</p>
          </li>
        </ul>
        <p>
          <time itemprop="datePublished" datetime="2023-10-12">2023-10-12</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2023/09/24/dont-pass-control-flags-downward.html</id>
    <title type="text">Don't Pass Control Flags Downward</title>
    <updated>2023-09-24T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2023/09/24/dont-pass-control-flags-downward.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>Don't Pass Control Flags Downward</h1>
        <p>This is tip 6.2 from <a href="https://thinking-forth.sourceforge.net">Thinking Forth</a>.</p>
        <p>Suppose we have the some code that looks like the following:</p>
        <pre>
          <code class="language-java">class Window {
  void setVisible(boolean show) {
    if (show) {
      // ... show the window
    } else {
      // ... hide the window
    }
  }
}

static void main(String... args) {
  var window = ...
  window.setVisible(true);
  // ... do something, then:
  window.setVisible(false);
}
</code>
        </pre>
        <p>We know exactly when the window should be shown/hidden at compile
time, so the calls to <code>setVisible(boolean)</code> are asking the program to
make pointless decisions at run time. It also makes the <code>setVisible</code>
function trying to do two jobs, show and hide the window, which
violates the single responsibility principle.</p>
        <p>So it would be better to just spell out exactly what our intentions are:</p>
        <pre>
          <code class="language-java">class Window {
  void show() {}
  void hide() {}
}

static void main(String... args) {
  var window = ...
  window.show();
  // ... do something, then:
  window.hide();
}
</code>
        </pre>
        <p>
          <time itemprop="datePublished" datetime="2023-09-24">2023-09-24</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2023/01/27/when-black-magic-fails-silently.html</id>
    <title type="text">When Black Magic Fails Silently</title>
    <updated>2023-01-27T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2023/01/27/when-black-magic-fails-silently.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>When Black Magic Fails Silently</h1>
        <p>Sometimes you run into black magic in a code base, the sort of thing
that works but you don't really know why, but you can accept it and
move on, because it all just work.</p>
        <p>Except when it shoots you in the foot to remind you it doesn't always
work as advertised. If you are lucky, you'll get a big error screaming
in your face, but often you are not that luckily, it breaks things
silently and carries on.</p>
        <p>Take Spring for example, a popular framework in the Java world. Say
you want to run some code within a database transaction, you often
just annotate the method with <code>@Transactional</code>:</p>
        <pre>
          <code class="language-java">@Service
class UserService {
  @Transactional
  void updateDetails() {
    // ...
  }
}
</code>
        </pre>
        <p>When <code>updateDetails()</code> is call by some other class, it will run
magically inside a transaction. But if it's calls from some method
within the same class, it will silently run the method without a
transaction (this is the default behaviour unless you change it),
resulting in bad data integrity - one of the worst things you would
want to have in a production database, especially if your system deals
with financial transactions.</p>
        <p>Another example is that, you may want to perform some common
validations for your service parameters:</p>
        <pre>
          <code class="language-java">@Service
class UserService {
  void updateName(@NotEmpty String name) {
    // ...
  }
}
</code>
        </pre>
        <p>This won't work because you forgot to annotate the class with
<code>@Validated</code> (which is easily missed if your class already has half a
dozen annotations), so again it will silently do nothing and the
method will happily accept invalid input, or worse, causing security
issues.</p>
        <p>Yet another example, you want to listen to certain events and want to
perform some action after the associated database transaction commits
successfully:</p>
        <pre>
          <code class="language-java">class UserEventListener {
  @TransactionalEventListener
  void onEvent(UserUpdated event) {
    // ...
  }
}
</code>
        </pre>
        <p>This works until you want to write to the database within the event
method. Your writes will appear to return successfully, but in fact
they are all dropped silently behind the scenes, and this is a
documented expected behaviour. Shocking.</p>
        <p>
          <time itemprop="datePublished" datetime="2023-01-27">2023-01-27</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2019/12/18/dependency-injection-is-parameter-passing.html</id>
    <title type="text">Dependency Injection is Parameter Passing</title>
    <updated>2019-12-18T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2019/12/18/dependency-injection-is-parameter-passing.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>Dependency Injection is Parameter Passing</h1>
        <p>Dependency injection means that instead of a function reaching out to
get its dependencies, it accepts the dependencies as parameters
instead. A dependency may be an external service, or something that
produces observable side effects, etc.</p>
        <pre>
          <code class="language-java">  // Before
  static void isBedTime() {
    var clock = Clock.getSystemClock();
    var time = clock.now();
    return time.hour() &gt;= 23;
  }

  // After
  static void isBedTime(Clock clock) {
    var time = clock.now();
    return time.hour() &gt;= 23;
  }
</code>
        </pre>
        <p>This make the function dumb (in a good way), and the dependencies
clear to the caller. The parameters will typically be some abstract
interfaces, and the concrete implementations can be swapped out to
something different by different callers, such as be mocked out to
make testing easy and deterministic. It's simple and yet effective in
reducing the complexity of large and complex programs, as dependencies
are being passed along instead of having 'smart functions' that go out
and grab things like a spider web.</p>
        <p>One may notice doing things this way will cause some functions to
start to have many parameters. This is a good thing to discovery, it's
helping to uncover that the function maybe doing too much, therefore
some refactoring is needed to make it fall in line with the single
responsibility principle, or the facade pattern is needed to be
applied to encapsulate/simplify interactions with some of the
underlying dependencies.</p>
        <p>One may also notice that there are various dependency injection
libraries out there, XML based, annotation based, using runtime
reflection, or compile time generation, some may be technically
interesting, but none are necessary, and just like every other code,
they all have their own complexity and issues. Dependency injection at
it's core is just parameter passing, it's dumb and simple, and that's
the way it should be. Less is more.</p>
        <p>
          <time itemprop="datePublished" datetime="2019-12-18">2019-12-18</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2019/07/26/pipeline-from-input-or-pipeline-to-output.html</id>
    <title type="text">Pipeline from Input, or Pipeline to Output?</title>
    <updated>2019-07-26T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2019/07/26/pipeline-from-input-or-pipeline-to-output.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>Pipeline from Input, or Pipeline to Output?</h1>
        <p>Let say you are going to implement an HTTP service, we can post it a
list of actions, it will perform those actions and return a list of
results.</p>
        <p>The first version is simple, read the actions, process them, then
write the results.</p>
        <pre>
          <code class="language-java">List&lt;Action&gt; actions =
  readAll(request);

List&lt;Result&gt; results =
  invokeAll(actions);

results.forEach(this::write);
</code>
        </pre>
        <p>Everything seems to work fine but after a while clients are starting
to get timeouts.</p>
        <p>It turns out that some actions take longer time to complete, say about
1 second, so if you send 10 of these actions to the service, it will
take 10 seconds for the client to see the response after sending the
request, because the service processes everything before sending the
response. Imagine a client sends hundreds or thousands of actions in a
request, it will take a very long time to see the first byte of the
response. And because the client has set its read timeout to be less
than that, it timed out.</p>
        <p>Apart from increasing the client timeout, you decided to improve the
service, turning it into a pipeline (<code>Stream</code> is lazy sequence):</p>
        <pre>
          <code class="language-java">Stream&lt;Action&gt; actions =
  read(request);

Stream&lt;Result&gt; results =
  actions.map(this::invoke);

results.forEach(this::write);
</code>
        </pre>
        <p>It will now read, invoke, output each of the actions one at a time as
a pipeline. Clients will see the results incrementally as they
complete, no need to wait for everything to be processed first. And this
keeps data flowing continuously, avoiding idle timeouts.</p>
        <p>But then you remembered this is no good as it could cause <a href="https://lae.nz/posts/2019/07/25/tcp-deadlock.html">TCP
Deadlocks</a>.</p>
        <p>Now what other options are there? If a full pipeline is no good, maybe
a partial pipeline would be okay?</p>
        <p>For the next option, the service can pipeline from the input, but
collect all the results into a list in memory, once complete, write
them out.</p>
        <pre>
          <code class="language-java">Stream&lt;Action&gt; actions =
  read(request);

List&lt;Result&gt; results =
  actions
    .map(this::invoke)
    .collect(toList());

results.forEach(this::write);
</code>
        </pre>
        <p>This means while the client sends the list of actions, the service
reads and processes the actions one at a time, when the service can't
read fast enough because it encounters slow actions, TCP applies back
pressure to the client, slowing down the rate which it sends data to
the service. The client should see the response soon after it finishes
sending a large request, as processing was done at the same time while
the data was being sent to the service. And since it drains the input
before output, it does not deadlock.</p>
        <p>While this is a perfectly fine solution in many cases, in this
specific case there is still a problem. Because TCP has buffers, when
the client finishes sending and switches to waiting for the response,
there maybe enough slow actions left in the buffers (especially with
compression turned on) yet to be received and read by the service,
enough to cause a read timeout.</p>
        <p>How about another option, if instead all the actions are read into a
list, then pipeline from processing to output?</p>
        <pre>
          <code class="language-java">List&lt;Action&gt; actions =
  readAll(request);

Stream&lt;Result&gt; results =
  actions
    .stream()
    .map(this::invoke);

results.forEach(this::write);
</code>
        </pre>
        <p>With this, the service would finish loading all actions into memory
soon after the client finishes sending them, as request parsing is
typically fast. Then the service starts processing and writing the
results back one at a time, the client will see each result
incrementally in the response stream. This way we avoids the request
buffering issues with the previous approach.</p>
        <p>Does this solve the problem then? Well, it depends. This approach,
like the deadlock prone implementation, requires the client to read
the response output for the actual processing to happen (except for
the first few, if their outputs fit into the TCP buffers). This may or
may not be acceptable depending on the requirements. And what should
the HTTP response code be? If it relies on knowing the outcome of the
actions, then this approach is a no go, since the response code is the
first thing to be sent, it would be fine though if the response code
is generic, and each result has their own result codes instead, again,
depends on the requirements.</p>
        <p>So it looks like there is not a satisfactory solution so far. There
are other options though, but they will probably have their own set of
trade offs. Sometimes there is just no perfect solution, but one can
have options, and can pick one that has the best fit.</p>
        <p>
          <time itemprop="datePublished" datetime="2019-07-26">2019-07-26</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2019/07/25/tcp-deadlock.html</id>
    <title type="text">TCP Deadlock</title>
    <updated>2019-07-25T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2019/07/25/tcp-deadlock.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>TCP Deadlock</h1>
        <p>Let's imagine an echo server implementation, where the server simply
takes the request input stream, copies the bytes to the response
output stream.</p>
        <p>Let's say a client starts sending bytes to the server, and the server
starts writing the bytes out as soon as they come in, it's pretty nice
that the server doesn't need to load the whole request first, which
means the client can see the response quickly if it wishes to.</p>
        <p>Except the client is still busy streaming the rest of bytes out to the
server, so it's not ready to read the response yet, even though the
response data has already started to come in.</p>
        <p>Meanwhile the server is still writing bytes out, all that has to go
somewhere. First they arrive at the client's TCP receive buffer,
managed by the operating system, once that's full, the client's side
of the TCP connection will tell the server side to stop sending, the
server side TCP listens and stops sending data out the wire, anymore
bytes written by the server will get placed onto the sending TCP
buffer and stay there, once that's full, any attempt to write will
block, and since the server is blocked, it won't read anything from
the input anymore, so that direction of the buffers will get filled up
too, and the client's attempt to write will also block, now we have a
deadlock - the client is waiting for the server to free up the buffer,
the server can't do that because it's waiting for the client to free
up the buffer.</p>
        <p>If you were monitoring your TCP Zero Windows you would see something
like this, simplified:</p>
        <pre>
          <code class="language-sh">% tcpdump 'tcp[14:2] = 0'
... server &gt; client: ... win 0 ...
... client &gt; server: ... win 0 ...
... server &gt; client: ... win 0 ...
... client &gt; server: ... win 0 ...
... server &gt; client: ... win 0 ...
</code>
        </pre>
        <p>Where <code>'win 0'</code> is one side telling the other they have no room for
anymore data.</p>
        <p>So it turns out this simple echo server will deadlock given a large
enough request. So to avoid deadlock it will have to consume the whole
request first before sending the response, which will require placing
a restriction on the size of the request. Unless you have full control
of the client code and implement it with reading/writing in parallel.</p>
        <p>In fact this problem isn't specific to TCP, any program with similar
IO structure will experience deadlock. For example, a parent process
starts a child process and sends data to it while the child process is
output data at the same time.</p>
        <p>
          <time itemprop="datePublished" datetime="2019-07-25">2019-07-25</time>
        </p>
      </div>
    </content>
  </entry>
  <entry>
    <id>https://lae.nz/posts/2019/07/22/the-principle-of-least-astonishment-and-naming.html</id>
    <title type="text">The Principle of Least Astonishment, and Naming</title>
    <updated>2019-07-22T00:00:00Z</updated>
    <link rel="alternate" href="https://lae.nz/posts/2019/07/22/the-principle-of-least-astonishment-and-naming.html" />
    <content type="xhtml">
      <div xmlns="http://www.w3.org/1999/xhtml">
        <h1>The Principle of Least Astonishment, and Naming</h1>
        <p>The Principle of Least Astonishment states that code should behave in
expected ways without hidden surprises. The following is an example of
how improperly named things will introduce bugs into systems.</p>
        <p>Given a list of players, each player has multiple games, we want to
build a map from game IDs to game names. We could do so using a <code>Map</code>
and loops Java:</p>
        <pre>
          <code class="language-java">Map&lt;Integer, String&gt; games = ...;
for (var player : players) {
  for (var game : player.games()) {
    games.put(
      game.id(),
      game.name()
    );
  }
}
</code>
        </pre>
        <p>We could also do it using the stream API with the <code>toMap</code> collector:</p>
        <pre>
          <code class="language-java">Map&lt;Integer, String&gt; games =
  players
    .stream()
    .flatMap(Player::games)
    .collect(toMap(
      Game::id,
      Game::name
    ));
</code>
        </pre>
        <p>Both seems reasonable and clear at first.</p>
        <p>A <code>Map</code> in Java doesn't contain duplicates, when putting a key value
into a map it will override existing mapping that has the same key,
this is standard behavior and everybody expects it. So when multiple
players share the same game, putting the same game ID to name mapping
into a map has no effect.</p>
        <p>However the <code>toMap</code> collector breaks this expectation, it will throw
an exception if it sees duplicates, this is rather surprising given
the name <code>toMap</code> implies it would behave like a normal map would. As
more and more developers are refactoring loops into streams, hopefully
this difference is caught during testing instead of things breaking in
production.</p>
        <p>The other problem is you tend to forget about things after a while, so
you started to make the same mistake again by using <code>toMap</code> thinking
it behaves like a normal map, only to find yourself relearning the
same lesson again, and again, when it surprises you by breaking
things. Same goes for your friends.</p>
        <p>It should have been given an abnormal name that fits with the abnormal
behavior.</p>
        <p>
          <time itemprop="datePublished" datetime="2019-07-22">2019-07-22</time>
        </p>
      </div>
    </content>
  </entry>
</feed>